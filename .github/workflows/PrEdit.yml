name: CI

on:
  pull_request:
    types:
      - assigned
      - unassigned
      - opened
      - edited
      - reopened
      - converted_to_draft
      - ready_for_review
      - review_requested
      - review_request_
  workflow_dispatch:
permissions:
  pull-requests: write
jobs:
  assignee-lint:
    runs-on: ubuntu-latest
    steps:
      - name: assignees
        id: assignees
        uses: actions/github-script@v7
        with:
          script: |
            let pr = context.payload.pull_request
            let assignees = pr.assignees
            let hasError = false
            let errorText = ""
            if(assignees == null || assignees.length == 0){
              core.error("No Assignee selected!")
              core.setOutput("ERROR", true)
            }
            
      - name: reviewers
        id: reviewers
        uses: actions/github-script@v7
        with:
          script: |
            let pr = context.payload.pull_request
            let hasError = false
            let errorText = ""

            let reviewers = pr.requested_reviewers
            if(reviewers == null || reviewers.length == 0){
              core.error("No Reviewers Assigned!")
              hasError = true;
            }

            let title = pr.title
            let reg = /^\[HTS-\d{3,}\]/
            let matches = title.match(reg)

            if(matches == null || matches.length == 0){
              core.error("Title should contain [HTS-XXXX] at the beginning!")
              core.setOutput("ERROR", true)
              hasError = true
            }

      - name: title
        id: title
        uses: actions/github-script@v7
        with:
          script: |
            let pr = context.payload.pull_request
            let hasError = false
            let errorText = ""

            let title = pr.title
            let reg = /^\[HTS-\d{3,}\]/
            let matches = title.match(reg)

            if(matches == null || matches.length == 0){
              core.error("Title should contain [HTS-XXXX] at the beginning!")
              core.setOutput("ERROR", true)
            }
        
      - name: outputError
        env:
          A_ERROR: ${{ steps.assignees.outputs.ERROR }}
          B_ERROR: ${{ steps.reviewers.outputs.ERROR }}
          C_ERROR: ${{ steps.title.outputs.ERROR }}
        uses: actions/github-script@v7
        with:
          script: |
            const { A_ERROR, B_ERROR, C_ERROR } = process.env
            if(A_ERROR || B_ERROR || C_ERROR){
               core.setFailed("One or more steps failed")
            }
              
    
  
          
        

        
        
